apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'jacoco'

//jacoco {
//    toolVersion = "$jacocoVersion"
//}
tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
//        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "cl.littlephoenix.pokedex"
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
//    sourceSets {
//        main.java.srcDirs += 'src/main/kotlin'
//        test.java.srcDirs += 'src/test/kotlin'
//        androidTest.java.srcDirs += 'src/androidTest/kotlin'
//    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude "META-INF/AL2.0"
        exclude 'META-INF/LGPL2.1'
        exclude 'win32-x86/attach_hotspot_windows.dll'
        exclude 'META-INF/licenses/ASM'
        exclude 'win32-x86-64/attach_hotspot_windows.dll'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
//        execution 'ANDROID_TEST_ORCHESTRATOR'
//        animationsDisabled true
//
//        unitTests {
//            includeAndroidResources = true
//        }
        unitTests {
            all {
                jvmArgs '-noverify', '-ea'
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation "androidx.activity:activity-ktx:1.2.3"
    implementation "androidx.fragment:fragment-ktx:1.3.4"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    //implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Hilt
    implementation "com.google.dagger:hilt-android:2.35"
    kapt "com.google.dagger:hilt-android-compiler:2.35"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.9.1"

    // Room components
    implementation "androidx.room:room-ktx:2.3.0"
    kapt "androidx.room:room-compiler:2.3.0"
    androidTestImplementation "androidx.room:room-testing:2.3.0"
    implementation "androidx.room:room-rxjava3:2.3.0"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"

    // Kotlin components
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"

    // Images
    implementation "io.coil-kt:coil:1.2.1"

    //rxjava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.13'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"

    // Testing
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation ("androidx.test.espresso:espresso-core:3.3.0", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //
    androidTestImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            //'**/*Test*.*',
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class', // covers component implementations
            '**/Dagger*Component$Builder.class', // covers component builders
            '**/*Module_*Factory.class',
            '**/data/entities/*.*',
            '**/data/entities/**',
            '**/data/model/*.*',
            '**/data/model/**',
            '**/*Entity*.*',
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def debugKTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
//    def debugTree = fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: fileFilter)
//    def debugKTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
//    def mainSrcK = "${project.projectDir}/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree, debugKTree]))
//    executionData.setFrom(fileTree(dir: "$buildDir", includes: ['jacoco/testDebugUnitTest.exec',
//                                                                'outputs/code_coverage/debugAndroidTest/connected/**/*.ec']))
    executionData.setFrom(fileTree(dir: project.projectDir, includes: ['**/**/*.exec', '**/**/*.ec']))

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: fileFilter)
        }))
    }
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}